---
import * as interfaces from '@/lib/interfaces.ts'
import {
  getPosts,
  getAllPosts,
  getRankedPosts,
  getPostBySlug,
  getPostsByTag,
  getBlock,
  getAllTags,
  getAllBlocksByBlockId,
  downloadFile,
} from '@/lib/notion/client.ts'
import {
  getPostLink,
  filePath,
  extractTargetBlocks,
} from '@/lib/blog-helpers.ts'
import Layout from '@/layouts/Layout.astro'
import PostDate from '@/components/PostDate.astro'
import PostTags from '@/components/PostTags.astro'
import PostTitle from '@/components/PostTitle.astro'
import PostBody from '@/components/PostBody.astro'
import PostRelativeLink from '@/components/PostRelativeLink.astro'
import BlogPostsLink from '@/components/BlogPostsLink.astro'
import BlogTagsLink from '@/components/BlogTagsLink.astro'
import styles from '@/styles/blog.module.css'
import { Image } from 'astro:assets'
import PostCard from '@/components/PostCard.astro'

export async function getStaticPaths() {
  const posts = await getAllPosts()
  return posts.map((post: interfaces.Post) => ({ params: { slug: post.Slug } }))
}

const { slug } = Astro.params

const post = await getPostBySlug(slug)
if (!post) {
  throw new Error(`Post not found. slug: ${slug}`)
}

const [blocks, allPosts, rankedPosts, recentPosts, tags, postsHavingSameTag] =
  await Promise.all([
    getAllBlocksByBlockId(post.PageId),
    getAllPosts(),
    getRankedPosts(),
    getPosts(5),
    getAllTags(),
    getPostsByTag(post.Tags[0]?.name, 6),
  ])

const fileAtacchedBlocks = extractTargetBlocks('image', blocks)
  .concat(extractTargetBlocks('file', blocks))
  .filter((block) => {
    if (!block) {
      return false
    }
    const imageOrFile = block.Image || block.File
    return imageOrFile && imageOrFile.File && imageOrFile.File.Url
  })

// Download files
await Promise.all(
  fileAtacchedBlocks
    .map(async (block) => {
      const expiryTime = (block.Image || block.File)?.File?.ExpiryTime
      if (expiryTime && Date.parse(expiryTime) > Date.now()) {
        return Promise.resolve(block)
      }
      return getBlock(block.Id)
    })
    .map((promise) =>
      promise.then((block) => {
        let url!: URL
        try {
          const urlString = (block.Image || block.File)?.File?.Url
          if (!urlString) {
            throw new Error('Invalid file URL')
          }
          url = new URL(urlString)
        } catch (err) {
          console.log('Invalid file URL')
          return Promise.reject()
        }
        return Promise.resolve(url)
      })
    )
    .map((promise) => promise.then(downloadFile))
)

const currentPostIndex = allPosts.findIndex((post) => post.Slug === slug)
const prevPost = allPosts[currentPostIndex + 1]
const nextPost = allPosts[currentPostIndex - 1]

let ogImage = ''
if (post.FeaturedImage && post.FeaturedImage.Url) {
  ogImage = new URL(
    filePath(new URL(post.FeaturedImage.Url)),
    Astro.site
  ).toString()
}
---

<Layout
  title={post.Title}
  description={post.Excerpt}
  path={getPostLink(post.Slug)}
  ogImage={ogImage}
>
  <div slot="main">
    <article class="container mx-auto px-4 py-8">
      <div class="max-w-3xl mx-auto">
        <header class="mb-8">
          <PostTitle post={post} />
          <div class="flex items-center gap-4 mt-4 text-muted-foreground">
            <PostDate post={post} />
            <PostTags post={post} />
          </div>
        </header>

        <div
          class="prose dark:prose-invert md:prose-lg prose-pre:bg-muted prose-pre:border prose-pre:border-border prose-img:my-0 mx-auto"
        >
          <PostBody blocks={blocks} />
        </div>

        <footer class="mt-16 pt-8 border-t">
          <nav class="flex justify-between items-center">
            {
              prevPost && (
                <a
                  href={getPostLink(prevPost.Slug)}
                  class="group flex items-center gap-2 text-muted-foreground hover:text-foreground transition-colors"
                >
                  <span class="text-lg">←</span>
                  <span class="text-sm">{prevPost.Title}</span>
                </a>
              )
            }
            {
              nextPost && (
                <a
                  href={getPostLink(nextPost.Slug)}
                  class="group flex items-center gap-2 text-muted-foreground hover:text-foreground transition-colors ml-auto"
                >
                  <span class="text-sm">{nextPost.Title}</span>
                  <span class="text-lg">→</span>
                </a>
              )
            }
          </nav>

          {
            postsHavingSameTag.length > 0 && (
              <div class="mt-16">
                <h2 class="text-xl font-bold mb-4">関連記事</h2>
                <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                  {postsHavingSameTag
                    .filter((p) => p.Slug !== post.Slug)
                    .slice(0, 2)
                    .map((p) => (
                      <PostCard post={p} />
                    ))}
                </div>
              </div>
            )
          }
        </footer>
      </div>
    </article>
  </div>
</Layout>
