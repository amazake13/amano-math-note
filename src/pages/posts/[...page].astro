---
import { getAllPosts, getAllTags, getRankedPosts } from '@/lib/notion/client.ts'
import type { Post } from '@/lib/interfaces'
import Layout from '@/layouts/Layout.astro'
import NoContents from '@/components/NoContents.astro'
import PostDate from '@/components/PostDate.astro'
import PostTags from '@/components/PostTags.astro'
import PostTitle from '@/components/PostTitle.astro'
import PostFeaturedImage from '@/components/PostFeaturedImage.astro'
import PostExcerpt from '@/components/PostExcerpt.astro'
import ReadMoreLink from '@/components/ReadMoreLink.astro'
import Pagination from '@/components/Pagination.astro'

interface PaginateOptions {
  pageSize: number
}

interface PaginatedPaths {
  paths: Array<{ params: { page: string[] } }>
  fallback: boolean
}

interface GetStaticPathsContext {
  paginate: (items: Post[], options: PaginateOptions) => PaginatedPaths
}

export async function getStaticPaths({ paginate }: GetStaticPathsContext) {
  const allPosts = await getAllPosts()
  const pageSize = 10
  return paginate(allPosts, { pageSize })
}

interface Props {
  page: {
    data: Post[]
    currentPage: number
    totalPages: number
  }
}

const { page }: Props = Astro.props

const { currentPage, totalPages } = page
const [rankedPosts, tags] = await Promise.all([getRankedPosts(), getAllTags()])
---

<Layout
  title={`Posts ${currentPage}/${totalPages}`}
  path={`/posts/${currentPage}`}
>
  <div slot="main" class="container mx-auto px-4">
    {
      page.data ? (
        page.data.map((post: Post) => (
          <div class="max-w-2xl mx-auto my-8">
            <PostDate post={post} />
            <PostTags post={post} />
            <PostTitle post={post} />
            <PostFeaturedImage post={post} />
            <PostExcerpt post={post} />
            <ReadMoreLink post={post} />
          </div>
        ))
      ) : (
        <NoContents />
      )
    }

    <footer>
      <Pagination {...page} />
    </footer>
  </div>
</Layout>
