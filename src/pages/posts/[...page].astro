---
import { getAllPosts, getAllTags, getRankedPosts } from '@/lib/notion/client.ts'
import type { Post } from '@/lib/interfaces'
import Layout from '@/layouts/Layout.astro'
import NoContents from '@/components/NoContents.astro'
import PostCard from '@/components/PostCard.astro'
import Pagination from '@/components/Pagination.astro'

interface PaginateOptions {
  pageSize: number
}

interface PaginatedPaths {
  paths: Array<{ params: { page: string[] } }>
  fallback: boolean
}

interface GetStaticPathsContext {
  paginate: (items: Post[], options: PaginateOptions) => PaginatedPaths
}

export async function getStaticPaths({ paginate }: GetStaticPathsContext) {
  const allPosts = await getAllPosts()
  const pageSize = 12
  return paginate(allPosts, { pageSize })
}

interface Props {
  page: {
    data: Post[]
    currentPage: number
    lastPage: number
    url: {
      prev: string | undefined
      next: string | undefined
    }
  }
}

const { page }: Props = Astro.props
const { currentPage, lastPage } = page
const [rankedPosts, tags] = await Promise.all([getRankedPosts(), getAllTags()])
---

<Layout
  title={`Posts ${currentPage} / ${lastPage}`}
  path={`/posts/${currentPage}`}
>
  <div slot="main" class="container mx-auto px-5 sm:px-6 md:px-8 py-8">
    <section class="max-w-7xl mx-auto">
      <div class="flex items-center justify-between mb-8">
        <h1 class="text-3xl font-bold">All Posts</h1>
      </div>

      {
        page.data ? (
          <div class="grid gap-8 md:grid-cols-2 lg:grid-cols-3">
            {page.data.map((post: Post) => (
              <PostCard post={post} />
            ))}
          </div>
        ) : (
          <NoContents />
        )
      }

      <footer class="mt-12">
        <Pagination
          currentPage={currentPage}
          lastPage={lastPage}
          url={page.url}
        />
      </footer>
    </section>
  </div>
</Layout>
