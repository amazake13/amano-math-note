---
import * as interfaces from '../../lib/interfaces.ts'
import { buildHeadingId } from '../../lib/blog-helpers.ts'
import RichText from './RichText.astro'
import NotionBlocks from '../NotionBlocks.astro'
import { Link, ChevronRight } from 'lucide-astro'

export interface Props {
  block: interfaces.Block & { Heading1: interfaces.Heading1 }
  headings: interfaces.Block[]
}

const { block, headings } = Astro.props

const id = buildHeadingId(block.Heading1)
---

{
  block.Heading1.IsToggleable ? (
    <details class="group mt-8 sm:mt-4 scroll-mt-20" id={id}>
      <summary class="cursor-text group/heading relative list-none [&::-webkit-details-marker]:hidden">
        <h3 class="flex items-center">
          <a
            href={`#${id}`}
            class="absolute -left-6 flex items-center h-full opacity-0 group-hover/heading:opacity-100 transition-opacity no-underline cursor-pointer"
          >
            <Link
              size={20}
              class="mr-2 text-muted-foreground hover:text-foreground"
            />
          </a>
          <ChevronRight
            size={20}
            class="inline-block mr-1 text-muted-foreground transition-transform group-open:rotate-90"
          />
          {block.Heading1.RichTexts.map((richText: interfaces.RichText) => (
            <RichText richText={richText} />
          ))}
        </h3>
      </summary>
      <div class="ml-4">
        {block.Heading1.Children && (
          <NotionBlocks
            blocks={block.Heading1.Children}
            headings={headings}
            isRoot={false}
            level={1}
          />
        )}
      </div>
    </details>
  ) : (
    <div
      class="group/heading relative block mt-8 mb-4 sm:mt-4 scroll-mt-20"
      id={id}
    >
      <h3 class="flex items-center">
        <a
          href={`#${id}`}
          class="absolute -left-6 flex items-center h-full opacity-0 group-hover/heading:opacity-100 transition-opacity no-underline cursor-pointer"
        >
          <Link size={20} class="text-muted-foreground hover:text-foreground" />
        </a>
        {block.Heading1.RichTexts.map((richText: interfaces.RichText) => (
          <RichText richText={richText} />
        ))}
      </h3>
    </div>
  )
}
