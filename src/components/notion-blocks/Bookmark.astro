---
import createMetascraper from 'metascraper'
import metascraperDescription from 'metascraper-description'
import metascraperImage from 'metascraper-image'
import metascraperTitle from 'metascraper-title'
import { isAmazonURL } from '@/lib/blog-helpers.ts'
import * as interfaces from '@/lib/interfaces.ts'

export interface Props {
  block: interfaces.Block
  urlMap: { [key: string]: string }
}

const { block, urlMap } = Astro.props

const urlString =
  (block.Bookmark || block.LinkPreview || block.Embed)?.Url || ''

let url: URL | undefined
let metadata: {
  title?: string
  description?: string
  image?: string
} = {}

try {
  url = new URL(urlString)

  if (url && !isAmazonURL(url)) {
    const metascraper = createMetascraper([
      metascraperDescription(),
      metascraperImage(),
      metascraperTitle(),
    ])
    const html = urlMap[url.toString()]
    if (html) {
      const result = await metascraper({ html, url: url.toString() })
      metadata = result
    }
  }
} catch (err) {
  console.log('Error processing URL:', err)
}
---

{
  url && (
    <>
      {isAmazonURL(url) ? (
        <div class="my-6">
          <a
            href={url.toString()}
            class="border-b border-[--anchor-border] opacity-70"
          >
            {url.toString()}
          </a>
        </div>
      ) : (
        <div class="my-6 flex w-full max-w-full overflow-hidden">
          <a
            href={url.toString()}
            target="_blank"
            rel="noopener noreferrer"
            class="flex w-full overflow-hidden rounded-xl border border-[rgba(55,53,47,0.16)] transition-colors hover:bg-black/[0.025] dark:hover:bg-white/[0.025]"
          >
            <div class="flex-[4_1_180px] overflow-hidden p-4">
              <div class="text-base font-medium truncate">
                {metadata && metadata.title}
              </div>
              <div class="text-sm text-muted-foreground truncate">
                {metadata && metadata.description}
              </div>
              <div class="mt-2 flex items-center gap-2">
                <div class="h-4 w-4 shrink-0">
                  <img
                    src={`https://www.google.com/s2/favicons?domain=${url.hostname}`}
                    alt="Favicon of the bookmark site"
                    loading="lazy"
                    class="h-full w-full"
                  />
                </div>
                <div class="text-sm text-muted-foreground truncate">
                  {url.origin}
                </div>
              </div>
            </div>
            <div class="relative flex-[1_1_180px] sm:block hidden">
              {metadata && metadata.image && (
                <img
                  src={metadata.image}
                  alt="Site image of the bookmark"
                  loading="lazy"
                  class="absolute inset-0 h-full w-full object-cover"
                />
              )}
            </div>
          </a>
        </div>
      )}
    </>
  )
}
